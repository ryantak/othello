#include <stdio.h>
#include <stdbool.h>
#include <time.h>

#define SIZE 8

// 오셀로 게임 보드를 초기화하는 함수
void initializeBoard(char board[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            board[i][j] = ' ';
        }
    }
    board[3][3] = 'W';
    board[3][4] = 'B';
    board[4][3] = 'B';
    board[4][4] = 'W';
}

// 보드를 출력하는 함수
void printBoard(char board[SIZE][SIZE]) {
    printf("  0 1 2 3 4 5 6 7\n");
    printf(" +-+-+-+-+-+-+-+-+\n");
    for (int i = 0; i < SIZE; i++) {
        printf("%d|", i);
        for (int j = 0; j < SIZE; j++) {
            printf("%c|", board[i][j]);
        }
        printf("\n +-+-+-+-+-+-+-+-+\n");
    }
}

// 해당 위치에 움직일 수 있는지 확인하는 함수
bool isValidMove(char board[SIZE][SIZE], int row, int col, char color) {
    if (board[row][col] != ' ') {
        return false;
    }
    int directions[8][2] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};
    char opponentColor = (color == 'W') ? 'B' : 'W';
    for (int d = 0; d < 8; d++) {
        int dr = directions[d][0];
        int dc = directions[d][1];
        int r = row + dr;
        int c = col + dc;
        if (r >= 0 && r < SIZE && c >= 0 && c < SIZE && board[r][c] == opponentColor) {
            r += dr;
            c += dc;
            while (r >= 0 && r < SIZE && c >= 0 && c < SIZE) {
                if (board[r][c] == ' ') {
                    break;
                }
                if (board[r][c] == color) {
                    return true;
                }
                r += dr;
                c += dc;
            }
        }
    }
    return false;
}

// 움직임을 실행하는 함수
bool makeMove(char board[SIZE][SIZE], int row, int col, char color) {
    if (!isValidMove(board, row, col, color)) {
        return false;
    }
    board[row][col] = color;
    int directions[8][2] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};
    char opponentColor = (color == 'W') ? 'B' : 'W';
    for (int d = 0; d < 8; d++) {
        int dr = directions[d][0];
        int dc = directions[d][1];
        int r = row + dr;
        int c = col + dc;
        if (r >= 0 && r < SIZE && c >= 0 && c < SIZE && board[r][c] == opponentColor) {
            r += dr;
            c += dc;
            while (r >= 0 && r < SIZE && c >= 0 && c < SIZE) {
                if (board[r][c] == ' ') {
                    break;
                }
                if (board[r][c] == color) {
                    int tr = row + dr;
                    int tc = col + dc;
                    while (tr != r || tc != c) {
                        board[tr][tc] = color;
                        tr += dr;
                        tc += dc;
                    }
                    break;
                }
                r += dr;
                c += dc;
            }
        }
    }
    return true;
}

int main() {
    char board[SIZE][SIZE];
    char currentPlayer = 'B';
    initializeBoard(board);
    bool gameover = false;
    int tim=0;
    clock_t st, et;

    while (!gameover) {
        printBoard(board);
        printf("Player %c's turn\n", currentPlayer);

        int row, col;
        printf("Enter row and column (e.g., 2 3): ");
        scanf("%d %d", &row, &col);
        if(tim==0){ st = clock(); tim++;}
        if (row >= 0 && row < SIZE && col >= 0 && col < SIZE) {
            if (makeMove(board, row, col, currentPlayer)) {
                currentPlayer = (currentPlayer == 'W') ? 'B' : 'W';
            } else {
                printf("Invalid move. Try again.\n");
            }
        } else {
            printf("Invalid input. Try again.\n");
        }

        // 게임 종료 조건 - 모든 칸이 채워질 때
        gameover = true;
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (board[i][j] == ' ') {
                    gameover = false;
                    break;
                }
            }
            if (!gameover) {
                break;
            }
        }
    }
    int white=0;
    int black=0;
    for(int i=0;i<SIZE;i++){
        for(int j=0;j<SIZE;j++){
            if(board[i][j]=='W'){
                white++;
            }
            else if(board[i][j]=='B'){black++;}
        }
    }
    printf("Game over!\n");
    if(black>white){printf("Winner is Black!\n");}
    else if(black == white) {printf("Tie!\n");}
    else {printf("Winner is White!\n");}
   
    et = clock();

    printf("%d ms", et - st); 



    return 0;
}
